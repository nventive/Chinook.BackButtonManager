steps:
## Install .netcore runtime required by GitVersion@5
- task: UseDotNet@2
  inputs:
    packageType: 'runtime'
    version: '2.1.0'
    installationPath: '$(Agent.ToolsDirectory)/dotnet'

- task: GitVersion@5
  inputs:
    runtime: 'core'
    useConfigFile: true
    configFilePath: build/gitversion.yml
  displayName: 'Calculate version'

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet $(NUGET_VERSION)'
  inputs:
    versionSpec: $(NUGET_VERSION)
    checkLatest: false

- task: NuGetCommand@2
  displayName: 'Restore solution packages'
  inputs:
    command: restore
    solution: $(Build.SourcesDirectory)/$(SolutionFileName)
    selectOrConfig: select
    feedRestore: nventive
    includeNuGetOrg: true
    verbosityRestore: Normal
    noCache: true

- task: MSBuild@1
  displayName: 'Build solution in $(ApplicationConfiguration) | $(ApplicationPlatform)'
  inputs:
    solution: $(Build.SourcesDirectory)/$(SolutionFileName)
    msbuildLocationMethod: version
    msbuildVersion: latest
    msbuildArchitecture: x86
    configuration: $(ApplicationConfiguration)
    platform: $(ApplicationPlatform)
    clean: false
    maximumCpuCount: true
    restoreNugetPackages: false
    logProjectEvents: false
    createLogFile: false
    msbuildArguments: > # Set the version of the packages, will have no effect on application projects (Heads).
      /p:PackageVersion=$(GitVersion.SemVer) 
      /p:ContinuousIntegrationBuild=true

- script: >
    dotnet test $(Build.SourcesDirectory)/$(SolutionFileName)
    /p:Configuration=$(ApplicationConfiguration)
    /p:CollectCoverage=true 
    /p:CoverletOutputFormat=cobertura
    /p:CoverletOutput=$(Build.SourcesDirectory)/coverage
    /p:ExcludeByFile="**/*.g.cs"
    --logger trx
    --no-build
  displayName: 'Run tests'
  condition: and(succeeded(), eq(variables['ApplicationPlatform'], 'NuGet'))

- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage report
  condition: and(succeededOrFailed(), eq(variables['ApplicationPlatform'], 'NuGet'))
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: "$(Build.SourcesDirectory)/coverage.cobertura.xml"

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact $(ApplicationConfiguration)'
  inputs:
    PathtoPublish: $(PackageOutputPath)
    ArtifactName: $(ArtifactName)
    ArtifactType: Container

- task: PostBuildCleanup@3
  displayName: 'Post-Build cleanup :  Cleanup files to keep build server clean!'
  condition: always()